//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use async_graphql::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "comment")]
#[graphql(concrete(name = "Comment", params()))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    #[graphql(skip)]
    pub id: i32,
    #[graphql(skip)]
    pub issue_id: i32,
    pub created_by: String,
    pub comment: String,
    pub created_at: chrono::NaiveDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::issue::Entity",
        from = "Column::IssueId",
        to = "super::issue::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Issue,
}

impl Related<super::issue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Issue.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn for_issue(id: i32) -> Select<Entity> {
        Self::find().filter(Column::IssueId.eq(id))
    }
}
