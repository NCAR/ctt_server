//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use super::prelude::Issue;
use async_graphql::*;
use sea_orm::entity::prelude::*;
use sea_orm::{ActiveValue, QueryOrder};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "target")]
#[graphql(concrete(name = "Target", params()))]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    #[graphql(skip)]
    pub id: i32,
    pub name: String,
    pub status: TargetStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::issue::Entity")]
    Issue,
}

impl Related<super::issue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Issue.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn all() -> Select<Entity> {
        Self::find().order_by_asc(Column::Name)
    }
    pub fn find_by_name(name: &str) -> Select<Entity> {
        Self::find().filter(Column::Name.eq(name))
    }
    pub fn find_by_id(id: i32) -> Select<Entity> {
        Self::find().filter(Column::Id.eq(id))
    }
    pub async fn find_by_issue_id(issue_id: i32, db: &DatabaseConnection) -> Select<Entity> {
        let issue = Issue::find_by_id(issue_id).one(db).await.unwrap().unwrap();
        Self::find_by_id(issue.target_id)
    }
    pub async fn create_target(
        name: &str,
        state: TargetStatus,
        db: &DatabaseConnection,
    ) -> Option<Model> {
        let new_target = ActiveModel {
            name: ActiveValue::Set(name.to_string()),
            status: ActiveValue::Set(state),
            ..Default::default()
        };
        new_target.insert(db).await.ok()
    }
}

#[derive(
    Copy,
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    async_graphql::Enum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "status")]
pub enum TargetStatus {
    #[sea_orm(string_value = "Online")]
    Online,
    #[sea_orm(string_value = "Draining")]
    Draining,
    #[sea_orm(string_value = "Offline")]
    Offline,
    #[sea_orm(string_value = "Down")]
    Down,
    #[sea_orm(string_value = "Unknown")]
    Unknown,
}

impl TargetStatus {
    pub fn from_str(state: &str) -> Option<Self> {
        match state {
            "Online" => Some(Self::Online),
            "Draining" => Some(Self::Draining),
            "Offline" => Some(Self::Offline),
            "Down" => Some(Self::Down),
            "Unknown" => Some(Self::Unknown),
            _ => None,
        }
    }
}
